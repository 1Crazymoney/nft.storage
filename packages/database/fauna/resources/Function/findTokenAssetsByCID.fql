/**
 * Finds token assets by tokenURI, which always will be a single token asset as
 * they are unique by a tokenURI.
 *
 * @param {string} uri - A `tokenURI` of the token.
 * @param {number} size - The maximum number of results to return in a single
 * `Page`.
 * @param {ID} [after] - Return the next `Page` of results after this cursor
 * (inclusive).
 * @param {ID} [before] - Return the previous `Page` of results before this
 * cursor (exclusive).
 * @returns {Page<TokenAsset>}
 */
CreateFunction({
  name: 'findTokenAssetsByCID',
  body: Query(
    Lambda(
      ['cid', 'size', 'after', 'before'],
      Let(
        {
          // Get a content by a CID.
          contentMatch: Match(Index('unique_Content_cid'), Var('cid')),
          content: If(
            IsEmpty(Var('contentMatch')),
            null,
            Get(Var('contentMatch'))
          ),
          // If content was not found there is no match, otherwise match all the
          // `Metadata` documents that link to found countent.
          matches: If(
            IsNull(Var('content')),
            null,
            Match(Index('metadata_by_content'), Select('ref', Var('content')))
          ),
          // If there are matches apply pagination otherwise use an empty array.
          refs: If(
            IsNull(Var('matches')),
            [],
            Call('paginate', Var('matches'), {
              size: Var('size'),
              after: Var('after'),
              before: Var('before'),
            })
          ),
        },
        // Map all matched `Metadata` refs to their source `TokenAsset`
        // documents.
        Map(
          Var('refs'),
          Lambda(
            'ref',
            Let(
              {
                // Get a document corresponding to this metadata ref
                metadata: Get(Var('ref')),
                // Get a referece to the TokenAsset that links to this metadata.
                source: Select(['data', 'source'], Var('metadata')),
              },
              // get a document associated with this reference.
              Get(Var('source'))
            )
          )
        )
      )
    )
  ),
  data: {
    gql: {
      meta: {
        location: 'Query',
        field: {
          name: 'findTokenAssetsByCID',
          directives: [
            {
              name: 'resolver',
              args: { name: 'findTokenAssetsByCID', paginated: true },
            },
            { name: 'relation', args: {} },
          ],
          type: { NotNull: { List: { Named: 'TokenAsset' } } },
          arguments: [{ name: 'cid', type: { Named: 'ID' } }],
        },
      },
    },
  },
})
